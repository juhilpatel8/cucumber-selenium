 private static TestDriver testDriver = null;
  private static final String defaultEnvironment = "local";
  public static String platform;
  private static final Logger LOGGER = LogManager.getLogger(DriverHooks.class);

  static {
    String tempEnv = System.getenv("CHANNEL_ENV");
    String environment = tempEnv == null || tempEnv.isEmpty() ? defaultEnvironment : tempEnv;
    TestConfiguration.loadConfiguration(environment);
  }

  public static void beforeSuite() {
    LOGGER.info("Before Suite started");
    testDriver = TestDriver.getInstance();
    testDriver.setTimeOut(TestConfiguration.getObjectTimeOut(), TestConfiguration.getPageTimeOut());
    LOGGER.info("Before Suite completed");
  }

  @Before
  public void beforeScenario(Scenario scenario) {
    testDriver.clearCookies();
    testDriver.listCookies();
    platform = getPlatformFrom(scenario);

    Dimension dimension = FormFactor.valueOf(FormFactor.class, platform.toUpperCase()).asDimension();
    testDriver.setWindowSize(dimension);
  }

  private String getPlatformFrom(Scenario scenario) {
    if (scenario.getSourceTagNames().contains("@mobile")) {
      return "mobile";
    }
    // default window size
    return "desktop";
  }

  public static void resetRedis(Collection<String> sourceTagNames) {
    String portal = sourceTagNames.contains("@agent") ? "agent" : "customer";
    String redisFlushURL = TestConfiguration.getRedisFlushURL(portal);
    try {
      HttpURLConnection connection = (HttpURLConnection) new URL(redisFlushURL).openConnection();
      connection.connect();
      if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
        LOGGER.warn("Unable to reset the redis using the URL: " + TestConfiguration.getPretenderResetURL());
        LOGGER.warn("Response Code: " + connection.getResponseCode());
        LOGGER.warn("Response Message: " + connection.getResponseMessage());
        LOGGER.warn("Unable to reset the redis.");
      }
      LOGGER.info("Cleaning up state in redis. Return Status: " + connection.getResponseMessage());
      connection.disconnect();
    } catch (IOException e) {
      LOGGER.error(e.fillInStackTrace());
    }
  }

  public static void resetPretender() {
    resetState(TestConfiguration.getPretenderResetURL(), "pretender");
  }

  public static void afterSuite() {
    if (testDriver != null) {
      testDriver.quit();
    }
  }

  @After
  public void afterScenario(Scenario scenario) {
    testDriver.takeScreenShot(scenario);
    if (scenario.getSourceTagNames().contains("@reset") && TestConfiguration.isStubed()) {
      resetRedis(scenario.getSourceTagNames());
      resetPretender();
    }
  }

  private static void resetState(String resetURL, String stateName) {
    try {
      HttpURLConnection connection = (HttpURLConnection) new URL(resetURL).openConnection();
      connection.connect();
      if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
        LOGGER.error("Unable to reset the " + stateName + " using the URL: " + TestConfiguration.getPretenderResetURL());
        LOGGER.error("Response Code: " + connection.getResponseCode());
        LOGGER.error("Response Message: " + connection.getResponseMessage());
        throw new RuntimeException("Unable to reset the " + stateName + ".");
      }
      LOGGER.info("Cleaning up state in pretender. Return Status: " + connection.getResponseMessage());
      connection.disconnect();
    } catch (IOException e) {
      LOGGER.error(e.fillInStackTrace());
    }
  }
