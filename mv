 private static TestConfiguration testConfiguration = null;
  private static TestConfig testConfig = null;
  private static final String defaultBrowser = "firefox";
  private static String browser;
  private static final String configName = "config/config.yml";
  private static final Logger LOGGER = LogManager.getLogger(TestConfiguration.class);

  private TestConfiguration(String environment) {
    List<TestConfig> lsOfTestConfig = new YAMLLoader().getAllConfig(configName);
    lsOfTestConfig.stream().filter(config -> config.getEnvironmentName().equals(environment)).forEach(config -> testConfig = config);
  }

  public static TestConfiguration loadConfiguration(String env) {
    if (testConfiguration == null) {
      LOGGER.info("Default Browser set for test execution: " + defaultBrowser);
      String tempBrowser = System.getenv("CHANNEL_BROWSER");
      browser = tempBrowser == null || tempBrowser.isEmpty() ? defaultBrowser : tempBrowser;
      LOGGER.info("Executing the test via the browser: " + browser);

      testConfiguration = new TestConfiguration(env);
      LOGGER.info("Loading the " + env + " environment details from the config file.");

      LOGGER.info("By default we use the pretender(stub) test data");
      if (isStubed()) {
        LOGGER.info("Executing the test using the pretender(stub) test data.");
      }
      else {
        LOGGER.info("Executing the test using the " + env + " test data.");
      }
    }
    return testConfiguration;
  }

  public static String getBrowser() {
    return browser;
  }

  public static String getCustomerAppURL() {
    return testConfig.getCustomerAppURL();
  }

  public static String getAgentAppURL() {
    return testConfig.getAgentAppUrl();
  }

  public static String getPretenderURL() {
    return testConfig.getPretenderUrl();
  }

  public static String getPretenderResetURL() {
    return getPretenderURL() + "clean-state";
  }

  public static String getRedisFlushURL(String portal) {
    String appURL = Objects.equals(portal, "customer") ? testConfig.getCustomerAppURL() : testConfig.getAgentAppUrl();
    return appURL.replaceFirst(portal + ".html", "redis/flush-db");
  }

  public static String getSeleniumHubURL() {
    return testConfig.getSeleniumHubUrl();
  }

  public static int getObjectTimeOut() {
    return testConfig.getObjectTimeOut();
  }

  public static int getPageTimeOut() {
    return testConfig.getPageTimeOut();
  }

  public static String getEnvironment() {
    return testConfig.getEnvironmentName();
  }

  public static boolean isStubed() {
    return testConfig.isChannelStub();
  }

  public static boolean isRemote(){
    return testConfig.isChannelRemote();
  }
